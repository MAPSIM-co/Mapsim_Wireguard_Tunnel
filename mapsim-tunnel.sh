#!/bin/bash

# ÿ™ÿπÿ±€åŸÅ ÿ±ŸÜ⁄Ø‚ÄåŸáÿß€å ⁄ÜÿßŸæ ŸÖÿ™ŸÜ ÿØÿ± ÿ™ÿ±ŸÖ€åŸÜÿßŸÑ ÿ®ÿ±ÿß€å ÿ≤€åÿ®ÿßÿ™ÿ± ⁄©ÿ±ÿØŸÜ ÿÆÿ±Ÿàÿ¨€å Ÿà ÿ™ŸÅ⁄©€å⁄© Ÿæ€åÿßŸÖ‚ÄåŸáÿß
RED='\033[0;31m'      # ÿ±ŸÜ⁄Ø ŸÇÿ±ŸÖÿ≤ ÿ®ÿ±ÿß€å Ÿæ€åÿßŸÖ‚ÄåŸáÿß€å ÿÆÿ∑ÿß
GREEN='\033[0;32m'    # ÿ±ŸÜ⁄Ø ÿ≥ÿ®ÿ≤ ÿ®ÿ±ÿß€å Ÿæ€åÿßŸÖ‚ÄåŸáÿß€å ŸÖŸàŸÅŸÇ€åÿ™
YELLOW='\033[1;33m'   # ÿ±ŸÜ⁄Ø ÿ≤ÿ±ÿØ ÿ®ÿ±ÿß€å Ÿæ€åÿßŸÖ‚ÄåŸáÿß€å Ÿáÿ¥ÿØÿßÿ±
BLUE='\033[0;34m'     # ÿ±ŸÜ⁄Ø ÿ¢ÿ®€å ÿ®ÿ±ÿß€å Ÿæ€åÿßŸÖ‚ÄåŸáÿß€å ÿßÿ∑ŸÑÿßÿπÿßÿ™€å
CYAN='\033[0;36m'     # ÿ±ŸÜ⁄Ø ŸÅ€åÿ±Ÿàÿ≤Ÿá‚Äåÿß€å ÿ®ÿ±ÿß€å ÿ®ÿÆÿ¥‚ÄåŸáÿß€å ŸÖÿÆÿ™ŸÑŸÅ ŸÖŸÜŸà Ÿà ÿ¨ÿØÿßŸàŸÑ
MAGENTA='\033[0;35m'  # ÿ±ŸÜ⁄Ø ÿ®ŸÜŸÅÿ¥ ÿ®ÿ±ÿß€å ÿπŸÜŸàÿßŸÜ‚ÄåŸáÿß Ÿà ÿÆÿ∑Ÿàÿ∑ ÿ¨ÿØÿß⁄©ŸÜŸÜÿØŸá
NC='\033[0m'          # ÿ±€åÿ≥ÿ™ ÿ±ŸÜ⁄Ø ÿ®Ÿá ÿ≠ÿßŸÑÿ™ ÿπÿßÿØ€å (No Color)

# ==============================================
# Configuration - ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿßŸàŸÑ€åŸá Ÿà ŸÖÿ™ÿ∫€åÿ±Ÿáÿß€å Ÿæÿß€åŸá ÿßÿ≥⁄©ÿ±€åŸæÿ™
# ==============================================

WG_INTERFACE="wg1"                     # ŸÜÿßŸÖ ÿß€åŸÜÿ™ÿ±ŸÅ€åÿ≥ WireGuard ⁄©Ÿá ÿ≥ÿßÿÆÿ™Ÿá Ÿà ŸÖÿØ€åÿ±€åÿ™ ŸÖ€å‚Äåÿ¥ŸàÿØ (ŸÖÿ´ŸÑÿßŸã wg1)
WG_PORT="21301"                        # ŸæŸàÿ±ÿ™€å ⁄©Ÿá WireGuard ÿ±Ÿà€å ÿ¢ŸÜ ⁄ØŸàÿ¥ ŸÖ€å‚ÄåÿØŸáÿØ (UDP)
WG_NETWORK="10.100.100.0/24"          # ÿ±ŸÜÿ¨ ÿ¢€å‚ÄåŸæ€å ÿØÿßÿÆŸÑ€å ⁄©Ÿá ÿ™ŸàŸÜŸÑ WireGuard ÿßÿ≥ÿ™ŸÅÿßÿØŸá ŸÖ€å‚Äå⁄©ŸÜÿØ (ÿ¥ÿ®⁄©Ÿá ÿÆÿµŸàÿµ€å)
Main_IP="10.100.100.1"                # ÿ¢€å‚ÄåŸæ€å ÿßÿÆÿ™ÿµÿßÿµ€å ÿß€åŸÜÿ™ÿ±ŸÅ€åÿ≥ ÿß€åÿ±ÿßŸÜ ÿØÿßÿÆŸÑ ÿ±ŸÜÿ¨ ÿ®ÿßŸÑÿß (ÿ¢ÿØÿ±ÿ≥ ÿ≥ÿ±Ÿàÿ± ÿß€åÿ±ÿßŸÜ ÿØÿ± ÿ¥ÿ®⁄©Ÿá WireGuard)

PEERS_FILE="/etc/wireguard/peers.json"           # ŸÖÿ≥€åÿ± ŸÅÿß€åŸÑ JSON ⁄©Ÿá ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ≥ÿ±Ÿàÿ±Ÿáÿß€å ÿÆÿßÿ±ÿ¨€å (ŸáŸÖÿ™ÿßŸáÿß) ÿØÿ± ÿ¢ŸÜ ÿ∞ÿÆ€åÿ±Ÿá ŸÖ€å‚Äåÿ¥ŸàÿØ
CONFIG_BACKUP_DIR="/etc/wireguard/backups"       # ŸæŸàÿ¥Ÿá‚Äåÿß€å ÿ®ÿ±ÿß€å ŸÜ⁄ØŸáÿØÿßÿ±€å ŸÜÿ≥ÿÆŸá‚ÄåŸáÿß€å Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ (ÿ®⁄©ÿßŸæ) ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ⁄©ÿßŸÜŸÅ€å⁄Ø WireGuard

MTU_SIZE="1420"                      # ÿ™ŸÜÿ∏€åŸÖÿßÿ™ MTU (Maximum Transmission Unit) ÿ®ÿ±ÿß€å ÿß€åŸÜÿ™ÿ±ŸÅ€åÿ≥ WireGuard - ŸÖÿπŸÖŸàŸÑÿßŸã ÿ®ÿ±ÿß€å ÿ®Ÿá€åŸÜŸá‚Äåÿ≥ÿßÿ≤€å ÿ¥ÿ®⁄©Ÿá
PERSISTENT_KEEPALIVE="25"            # ŸÖÿØÿ™ ÿ≤ŸÖÿßŸÜ (ÿ´ÿßŸÜ€åŸá) ÿ®ÿ±ÿß€å ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ‚ÄåŸáÿß€å keepalive ÿ®Ÿá ŸáŸÖÿ™ÿßŸáÿß (ÿ®ÿ±ÿß€å ÿ≠ŸÅÿ∏ ÿßÿ™ÿµÿßŸÑ ÿ≠ÿ™€å ÿ≤ŸÖÿßŸÜ€å ⁄©Ÿá ÿ®ÿØŸàŸÜ ÿ™ÿ±ÿßŸÅ€å⁄© Ÿáÿ≥ÿ™ŸÜÿØ)

DEFAULT_SSH_PORT="22"                # ŸæŸàÿ±ÿ™ Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂ SSH ÿ®ÿ±ÿß€å ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá ÿ≥ÿ±Ÿàÿ±Ÿáÿß€å ÿÆÿßÿ±ÿ¨€å
DEFAULT_SSH_USER="root"              # ŸÜÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±€å Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂ SSH ÿ®ÿ±ÿß€å ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá ÿ≥ÿ±Ÿàÿ±Ÿáÿß€å ÿÆÿßÿ±ÿ¨€å

Main_PUBLIC_IP_FILE="/etc/wireguard/Main_public_ip.txt"  # ŸÅÿß€åŸÑ€å ⁄©Ÿá ÿ¢€å‚ÄåŸæ€å Ÿæÿßÿ®ŸÑ€å⁄© (ÿÆÿßÿ±ÿ¨€å) ÿ≥ÿ±Ÿàÿ± ÿß€åÿ±ÿßŸÜ ÿ±ÿß ÿ∞ÿÆ€åÿ±Ÿá ŸÖ€å‚Äå⁄©ŸÜÿØ (ÿ®ÿ±ÿß€å ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿØÿ± ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ™ŸàŸÜŸÑ)
IP="0.0.0.0" # ŸÖŸÇÿØÿßÿ± Ÿæ€åÿ¥ ŸÅÿ±ÿ∂
Main_PORT_FILE="/etc/wireguard/Main_port.txt"
# ==============================================
# Initialize system
# ==============================================

# ÿ™ÿßÿ®ÿπ ÿßÿµŸÑ€å ÿ®ÿ±ÿß€å ÿ¢ŸÖÿßÿØŸá‚Äåÿ≥ÿßÿ≤€å ÿ≥€åÿ≥ÿ™ŸÖ ŸÇÿ®ŸÑ ÿßÿ≤ ÿ¥ÿ±Ÿàÿπ ⁄©ÿßÿ± ÿßÿ≥⁄©ÿ±€åŸæÿ™
init() {
    check_root           # ÿ®ÿ±ÿ±ÿ≥€å ÿß€åŸÜ⁄©Ÿá ÿßÿ≥⁄©ÿ±€åŸæÿ™ ÿ®ÿß ÿØÿ≥ÿ™ÿ±ÿ≥€å root ÿßÿ¨ÿ±ÿß ÿ¥ÿØŸá ÿ®ÿßÿ¥ÿØ
    install_dependencies # ŸÜÿµÿ® ÿ®ÿ≥ÿ™Ÿá‚ÄåŸáÿß Ÿà ÿßÿ®ÿ≤ÿßÿ±Ÿáÿß€å ŸÖŸàÿ±ÿØ ŸÜ€åÿßÿ≤ ÿ®ÿ±ÿß€å ÿßÿ¨ÿ±ÿß€å ÿ™ŸàŸÜŸÑ WireGuard
    init_filesystem      # ÿ¢ŸÖÿßÿØŸá‚Äåÿ≥ÿßÿ≤€å ŸæŸàÿ¥Ÿá‚ÄåŸáÿß Ÿà ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ŸÖŸàÿ±ÿØ ŸÜ€åÿßÿ≤ (ŸÖÿ´ŸÑ ŸÅÿß€åŸÑ peers.json Ÿà ŸæŸàÿ¥Ÿá ÿ®⁄©ÿßŸæ)
}

# ÿ®ÿ±ÿ±ÿ≥€å ÿß€åŸÜ⁄©Ÿá ⁄©ÿßÿ±ÿ®ÿ± ŸÅÿπŸÑ€å root ÿ®ÿßÿ¥ÿØ
check_root() {
    # ÿß⁄Øÿ± ÿ¥ŸÜÿßÿ≥Ÿá ⁄©ÿßÿ±ÿ®ÿ±€å ŸÅÿπŸÑ€å (EUID) ÿ®ÿ±ÿßÿ®ÿ± €∞ ŸÜÿ®ŸàÿØ (€åÿπŸÜ€å root ŸÜ€åÿ≥ÿ™)
    # Ÿæ€åÿ∫ÿßŸÖ ÿÆÿ∑ÿß ŸÖ€å‚ÄåÿØŸáÿØ Ÿà ÿßÿ≥⁄©ÿ±€åŸæÿ™ ÿ±ÿß ŸÖÿ™ŸàŸÇŸÅ ŸÖ€å‚Äå⁄©ŸÜÿØ
    [[ $EUID -ne 0 ]] && msg error "This script must be run as root!" && exit 1
}

# ÿ™ÿßÿ®ÿπ ⁄©ŸÖ⁄©€å ÿ®ÿ±ÿß€å ⁄ÜÿßŸæ Ÿæ€åÿßŸÖ‚ÄåŸáÿß€å ÿ±ŸÜ⁄Ø€å ÿ®ÿß ÿ¢€å⁄©ŸàŸÜ
msg() {
    local type="$1"; shift
    case "$type" in
        error)   echo -e "${RED}‚úó ERROR: $*${NC}" >&2 ;;    # Ÿæ€åÿßŸÖ ÿÆÿ∑ÿß ÿ®ÿß ÿ±ŸÜ⁄Ø ŸÇÿ±ŸÖÿ≤ Ÿà ÿπŸÑÿßŸÖÿ™ ‚úó
        success) echo -e "${GREEN}‚úì SUCCESS: $*${NC}" ;;    # Ÿæ€åÿßŸÖ ŸÖŸàŸÅŸÇ€åÿ™ ÿ®ÿß ÿ±ŸÜ⁄Ø ÿ≥ÿ®ÿ≤ Ÿà ÿπŸÑÿßŸÖÿ™ ‚úì
        info)    echo -e "${BLUE}‚Ñπ INFO: $*${NC}" ;;       # Ÿæ€åÿßŸÖ ÿßÿ∑ŸÑÿßÿπ‚Äåÿ±ÿ≥ÿßŸÜ€å ÿ®ÿß ÿ±ŸÜ⁄Ø ÿ¢ÿ®€å Ÿà ÿπŸÑÿßŸÖÿ™ ‚Ñπ
        warn)    echo -e "${YELLOW}‚ö† WARNING: $*${NC}" ;;   # Ÿæ€åÿßŸÖ Ÿáÿ¥ÿØÿßÿ± ÿ®ÿß ÿ±ŸÜ⁄Ø ÿ≤ÿ±ÿØ Ÿà ÿπŸÑÿßŸÖÿ™ ‚ö†
    esac
}

# ÿ¢ŸÖÿßÿØŸá‚Äåÿ≥ÿßÿ≤€å ÿ≥ÿßÿÆÿ™ÿßÿ± ŸæŸàÿ¥Ÿá Ÿà ŸÅÿß€åŸÑ‚ÄåŸáÿß ŸÇÿ®ŸÑ ÿßÿ≤ ÿßÿ¨ÿ±ÿß
init_filesystem() {
    mkdir -p "$CONFIG_BACKUP_DIR"   # ÿ≥ÿßÿÆÿ™ ŸæŸàÿ¥Ÿá ÿ®ÿ±ÿß€å ŸÜ⁄ØŸáÿØÿßÿ±€å ÿ®⁄©ÿßŸæ‚ÄåŸáÿß€å ⁄©ÿßŸÜŸÅ€å⁄Ø WireGuard (ÿß⁄Øÿ± Ÿàÿ¨ŸàÿØ ŸÜÿØÿßÿ¥ÿ™Ÿá ÿ®ÿßÿ¥ÿØ)
    # ÿß⁄Øÿ± ŸÅÿß€åŸÑ peers.json Ÿàÿ¨ŸàÿØ ŸÜÿØÿßÿ¥ÿ™ÿå €å⁄© ÿ¢ÿ±ÿß€åŸá JSON ÿÆÿßŸÑ€å ÿØÿ± ÿ¢ŸÜ ÿß€åÿ¨ÿßÿØ ⁄©ŸÜ
    [[ ! -f "$PEERS_FILE" ]] && echo '[]' > "$PEERS_FILE"
}

# ==============================================
# Status checking functions - ÿ™Ÿàÿßÿ®ÿπ ÿ®ÿ±ÿ±ÿ≥€å Ÿàÿ∂ÿπ€åÿ™ ÿ≥€åÿ≥ÿ™ŸÖ Ÿà ⁄©ÿßŸÜ⁄©ÿ¥ŸÜ‚ÄåŸáÿß
# ==============================================

# ÿ®ÿ±ÿ±ÿ≥€å Ÿàÿ¨ŸàÿØ ⁄©ÿßŸÜŸÅ€å⁄Ø ÿß€åŸÜÿ™ÿ±ŸÅ€åÿ≥ WireGuard ÿß€åÿ±ÿßŸÜ (€åÿπŸÜ€å ÿ¢€åÿß ÿß€åÿ±ÿßŸÜ ŸÜÿµÿ® ÿ¥ÿØŸá €åÿß ŸÜŸá)
is_Main_installed() {
    # ÿß⁄Øÿ± ŸÅÿß€åŸÑ ⁄©ÿßŸÜŸÅ€å⁄Ø WireGuard (wg1.conf) Ÿàÿ¨ŸàÿØ ÿØÿßÿ¥ÿ™Ÿá ÿ®ÿßÿ¥ÿØÿå ÿÆÿ±Ÿàÿ¨€å ŸÖŸàŸÅŸÇ (true) ÿÆŸàÿßŸáÿØ ÿ®ŸàÿØ
    [[ -f "/etc/wireguard/$WG_INTERFACE.conf" ]]
}

# ÿ®ÿ±ÿ±ÿ≥€å Ÿàÿ∂ÿπ€åÿ™ ÿ≥ÿ±Ÿà€åÿ≥ WireGuard ÿ±Ÿà€å ÿß€åŸÜÿ™ÿ±ŸÅ€åÿ≥ ÿß€åÿ±ÿßŸÜ (wg1)
get_service_status() {
    # ÿß⁄Øÿ± ÿ≥ÿ±Ÿà€åÿ≥ wg-quick@wg1 ŸÅÿπÿßŸÑ ÿ®ÿßÿ¥ÿØÿå "Active" ÿ≥ÿ®ÿ≤ ⁄ÜÿßŸæ ŸÖ€å‚Äåÿ¥ŸàÿØ
    if systemctl is-active --quiet wg-quick@$WG_INTERFACE; then
        echo -e "${GREEN}Active${NC}"
    else
        # ÿØÿ± ÿ∫€åÿ± ÿß€åŸÜÿµŸàÿ±ÿ™ "Inactive" ŸÇÿ±ŸÖÿ≤ ⁄ÜÿßŸæ ŸÖ€å‚Äåÿ¥ŸàÿØ
        echo -e "${RED}Inactive${NC}"
    fi
}

# ⁄Øÿ±ŸÅÿ™ŸÜ ÿ™ÿπÿØÿßÿØ ÿ≥ÿ±Ÿàÿ±Ÿáÿß€å ÿÆÿßÿ±ÿ¨€å (peers) ÿ´ÿ®ÿ™‚Äåÿ¥ÿØŸá ÿØÿ± ŸÅÿß€åŸÑ peers.json
get_peer_count() {
    if [[ -f "$PEERS_FILE" ]]; then
        # ÿ®ÿß ÿØÿ≥ÿ™Ÿàÿ± jq ÿ∑ŸàŸÑ ÿ¢ÿ±ÿß€åŸá JSON ÿ±ÿß ŸÜÿ¥ÿßŸÜ ŸÖ€å‚ÄåÿØŸáÿØ (ÿ™ÿπÿØÿßÿØ ÿ¢€åÿ™ŸÖ‚ÄåŸáÿß)
        jq length "$PEERS_FILE"
    else
        # ÿß⁄Øÿ± ŸÅÿß€åŸÑ Ÿàÿ¨ŸàÿØ ŸÜÿØÿßÿ¥ÿ™ €∞ ÿ±ÿß ŸÜŸÖÿß€åÿ¥ ŸÖ€å‚ÄåÿØŸáÿØ
        echo "0"
    fi
}

# ⁄Øÿ±ŸÅÿ™ŸÜ ÿ™ÿπÿØÿßÿØ ÿ≥ÿ±Ÿàÿ±Ÿáÿß€å ŸÖÿ™ÿµŸÑ ÿ®Ÿá ÿß€åŸÜÿ™ÿ±ŸÅ€åÿ≥ WireGuard (peers ŸÅÿπŸÑ€å ⁄©Ÿá ÿØÿ± handshake Ÿàÿ¨ŸàÿØ ÿØÿßÿ±ŸÜÿØ)
get_connected_peers() {
    # ÿØÿ≥ÿ™Ÿàÿ± wg show ÿßÿ∑ŸÑÿßÿπÿßÿ™ peers ÿ±ÿß ŸÜŸÖÿß€åÿ¥ ŸÖ€å‚ÄåÿØŸáÿØÿå ÿÆÿ∑‚ÄåŸáÿß€å€å ⁄©Ÿá ÿ®ÿß peer: ÿ¥ÿ±Ÿàÿπ ŸÖ€å‚Äåÿ¥ŸàŸÜÿØ ÿ¥ŸÖÿ±ÿØŸá ŸÖ€å‚Äåÿ¥ŸàÿØ
    # ÿØÿ± ÿµŸàÿ±ÿ™ ÿÆÿ∑ÿß €åÿß ÿπÿØŸÖ Ÿàÿ¨ŸàÿØ peer ÿπÿØÿØ €∞ ÿ®ÿ±⁄Øÿ±ÿØÿßŸÜÿØŸá ŸÖ€å‚Äåÿ¥ŸàÿØ
    wg show $WG_INTERFACE 2>/dev/null | grep -E '^peer:' | wc -l || echo "0"
}

# ÿ®ÿ±ÿ±ÿ≥€å Ÿàÿ∂ÿπ€åÿ™ ÿßÿ™ÿµÿßŸÑ €å⁄© peer ŸÖÿ¥ÿÆÿµ (ÿ®ÿ± ÿßÿ≥ÿßÿ≥ ÿ¢€å‚ÄåŸæ€å ÿØÿßÿÆŸÑ€å Ÿà ⁄©ŸÑ€åÿØ ÿπŸÖŸàŸÖ€å)
check_peer_connection() {
    local peer_ip=$1        # ÿ¢€å‚ÄåŸæ€å ÿÆÿµŸàÿµ€å ÿ≥ÿ±Ÿàÿ± ÿÆÿßÿ±ÿ¨€å ÿØÿ± ÿ™ŸàŸÜŸÑ
    local peer_pubkey=$2    # ⁄©ŸÑ€åÿØ ÿπŸÖŸàŸÖ€å ÿ¢ŸÜ ÿ≥ÿ±Ÿàÿ± ÿÆÿßÿ±ÿ¨€å

    # ÿ™ŸÑÿßÿ¥ ÿ®ÿ±ÿß€å ping ÿ®Ÿá ÿ¢€å‚ÄåŸæ€å ÿÆÿµŸàÿµ€å peer ÿ®ÿß €å⁄© ÿ®ÿ≥ÿ™Ÿá Ÿà timeout €≤ ÿ´ÿßŸÜ€åŸá
    if ping -c 1 -W 2 "$peer_ip" >/dev/null 2>&1; then
        # ÿß⁄Øÿ± Ÿæÿßÿ≥ÿÆ ÿØÿßÿØÿå €åÿπŸÜ€å ÿßÿ™ÿµÿßŸÑ ÿ≤ŸÜÿØŸá Ÿà ÿ≥ÿ®ÿ≤ ÿ±ŸÜ⁄Ø ŸÜŸÖÿß€åÿ¥ ÿØÿßÿØŸá ŸÖ€å‚Äåÿ¥ŸàÿØ
        echo -e "${GREEN}Connected${NC}"
    # ÿß⁄Øÿ± ping ŸÖŸàŸÅŸÇ ŸÜÿ®ŸàÿØ ŸàŸÑ€å ÿ¢ÿÆÿ±€åŸÜ handshake ÿ®€åŸÜ ÿØŸà ÿ≥ÿ±Ÿàÿ± ÿßŸÜÿ¨ÿßŸÖ ÿ¥ÿØŸá ÿ®ŸàÿØ (ÿ®ÿØŸàŸÜ Ÿæÿßÿ≥ÿÆ ping)
    elif wg show $WG_INTERFACE | grep -A 5 "$peer_pubkey" | grep -q "latest handshake"; then
        # Ÿàÿ∂ÿπ€åÿ™ handshake ÿ®ÿ±ŸÇÿ±ÿßÿ± ŸàŸÑ€å Ÿæ€åŸÜ⁄Ø ŸÖŸàŸÅŸÇ ŸÜ€åÿ≥ÿ™ (ÿ≤ÿ±ÿØ)
        echo -e "${YELLOW}Handshake only${NC}"
    else
        # ÿØÿ± ÿ∫€åÿ± ÿß€åŸÜÿµŸàÿ±ÿ™ ÿßÿ™ÿµÿßŸÑ ŸÇÿ∑ÿπ ÿ¥ÿØŸá (ŸÇÿ±ŸÖÿ≤)
        echo -e "${RED}Disconnected${NC}"
    fi
}

# ŸÜÿµÿ® ÿ®ÿ≥ÿ™Ÿá‚ÄåŸáÿß Ÿà Ÿæ€åÿ¥‚ÄåŸÜ€åÿßÿ≤Ÿáÿß€å ŸÑÿßÿ≤ŸÖ ÿ®ÿ±ÿß€å ÿßÿ¨ÿ±ÿß€å ÿ™ŸàŸÜŸÑ WireGuard Ÿà ⁄©ÿßÿ± ÿ®ÿß ÿßÿ≥⁄©ÿ±€åŸæÿ™
install_dependencies() {
    msg info "Installing required dependencies..."   # ÿßÿ∑ŸÑÿßÿπ‚Äåÿ±ÿ≥ÿßŸÜ€å ÿ¥ÿ±Ÿàÿπ ŸÜÿµÿ®
    apt-get update -y                               # ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ŸÑ€åÿ≥ÿ™ ÿ®ÿ≥ÿ™Ÿá‚ÄåŸáÿß
    # ŸÜÿµÿ® ÿ®ÿ≥ÿ™Ÿá‚ÄåŸáÿß€å wireguard Ÿà ÿßÿ®ÿ≤ÿßÿ±Ÿáÿß€å ÿ¨ÿßŸÜÿ®€å ÿ®ÿ±ÿß€å ŸÖÿØ€åÿ±€åÿ™ ⁄©ŸÑ€åÿØÿå jsonÿå sshÿå Ÿà ŸÅÿß€åÿ±ŸàÿßŸÑ
    apt-get install -y wireguard wireguard-tools jq sshpass resolvconf iptables
}

# ==============================================
# ŸÜŸÖÿß€åÿ¥ ŸáÿØÿ± ÿßÿµŸÑ€å Ÿà Ÿàÿ∂ÿπ€åÿ™ tunnel Ÿà peerŸáÿß
# ==============================================
show_header() {
    width=81
    export LC_ALL=C.UTF-8
    echo -e '\n\n'

    # ŸáÿØÿ± ÿßÿµŸÑ€å
    echo -e "${CYAN}‚îå$(printf '‚îÄ%.0s' $(seq 1 $((width - 2))))‚îê${NC}"
    printf "${CYAN}‚îÇ%*s%s%*s‚îÇ${NC}\n" $(( (width - 2 - 33) / 2 )) "" "Mapsim Tunnel Status Manager     " $(( (width - 2 - 33 + 1) / 2 )) ""
    echo -e "${CYAN}‚îú$(printf '‚îÄ%.0s' $(seq 1 $((width - 2))))‚î§${NC}"

    # IP ÿ≥ÿ±Ÿàÿ± Ÿà ŸÖŸàŸÇÿπ€åÿ™ ÿ¢ŸÜ
    INFO=$(curl -s https://ipinfo.io/json)
    if ! echo "$INFO" | jq -e .ip >/dev/null 2>&1; then
        INFO=$(curl -s http://ip-api.com/json/)
        IP=$(echo "$INFO" | jq -r .query)
        CITY=$(echo "$INFO" | jq -r .city)
        COUNTRY=$(echo "$INFO" | jq -r .country)
    else
        IP=$(echo "$INFO" | jq -r .ip)
        CITY=$(echo "$INFO" | jq -r .city)
        COUNTRY=$(echo "$INFO" | jq -r .country)
    fi

    IP="${IP:-Not found}"
    CITY="${CITY:-Unknown}"
    COUNTRY="${COUNTRY:-Unknown}"

    LINE1="Your IP Address = üåê $IP"
    LINE2="Location        = üìç $CITY, $COUNTRY"

    printf "${CYAN}‚îÇ ${YELLOW}%-79s ‚îÇ\n" "$LINE1"
    printf "${CYAN}‚îÇ ${GREEN}%-79s ‚îÇ\n" "$LINE2"




    # ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ≥ÿ±Ÿà€åÿ≥
    local service_status=$(get_service_status)
    local peer_count=$(get_peer_count)
    local connected_count=$(get_connected_peers)
    WG_PORT=$(get_wg_port)

    printf "${CYAN}‚îÇ %-77s            ‚îÇ\n" "Service: $service_status"
    printf "${CYAN}‚îÇ %-77s ‚îÇ\n" "Peers: $peer_count     Connected: $connected_count"

    # ŸÅŸÇÿ∑ ÿß⁄Øÿ± ÿß€åÿ±ÿßŸÜ ŸÜÿµÿ® ÿ¥ÿØŸá ÿ®ÿßÿ¥ÿØ
    if is_Main_installed; then
        local private_key=$(grep -m1 -oP '(?<=PrivateKey = ).*' "/etc/wireguard/$WG_INTERFACE.conf")
        if [[ -n "$private_key" ]]; then
            local Main_pubkey=$(echo "$private_key" | wg pubkey | cut -c 1-16)
            printf "${CYAN}‚îÇ %-77s ‚îÇ\n" "Main Public Key: $Main_pubkey..."
        else
            printf "${CYAN}‚îÇ %-77s ‚îÇ\n" "Main Public Key: [Not Found]"
        fi
        printf "${CYAN}‚îÇ %-77s ‚îÇ\n" "IP: $Main_IP     Port: $WG_PORT"
    fi

    echo -e "${CYAN}‚îî$(printf '‚îÄ%.0s' $(seq 1 $((width - 2))))‚îò${NC}"

    # ÿ¨ÿØŸàŸÑ ⁄©ÿßŸÜ⁄©ÿ¥ŸÜ‚ÄåŸáÿß (ÿØÿ± ÿµŸàÿ±ÿ™ Ÿàÿ¨ŸàÿØ peer)
    if [[ -f "$PEERS_FILE" && $(jq length "$PEERS_FILE") -gt 0 ]]; then
        echo -e "\n${CYAN}Active Peer Connections:${NC}"
        echo -e "${CYAN}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
        echo -e "${CYAN}‚îÇ     Private IP     ‚îÇ     Public IP      ‚îÇ          Status            ‚îÇ${NC}"
        echo -e "${CYAN}‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§${NC}"

        jq -r '.[] | "\(.ip)|\(.public_ip)|\(.pubkey)"' "$PEERS_FILE" | while IFS='|' read -r ip public_ip pubkey; do
            status_raw=$(check_peer_connection "$ip" "$pubkey")
            status_plain=$(echo -e "$status_raw" | sed 's/\x1B\[[0-9;]*[mK]//g')
            status_padded=$(printf "%-26s" "$status_plain")
            status_colored=$(echo "$status_padded" | sed "s|$status_plain|$status_raw|")

            printf "${CYAN}‚îÇ %-18s ‚îÇ %-18s ‚îÇ %s ‚îÇ\n" "$ip" "$public_ip" "$status_colored"
        done

        echo -e "${CYAN}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"
    fi

    echo ""
}





# ==============================================
# Core functionality (working menu options)
# ==============================================

install_main_server() {
    # ÿ®ÿ±ÿ±ÿ≥€å ÿß€åŸÜ⁄©Ÿá ŸÇÿ®ŸÑÿßŸã ÿß€åŸÜÿ™ÿ±ŸÅ€åÿ≥ ÿß€åÿ±ÿßŸÜ ŸÜÿµÿ® ÿ¥ÿØŸá €åÿß ŸÜŸá
    if is_Main_installed; then
        msg info "Main server is already installed!"
        return
    fi

    msg info "Configuring Main server..."

    while true; do
        read -p "Enter Mapsim Tunnel port [$WG_PORT]: " input_port
        input_port=${input_port:-$WG_PORT}

        # ÿ®ÿ±ÿ±ÿ≥€å ÿß€åŸÜ⁄©Ÿá ŸÅŸÇÿ∑ ÿπÿØÿØ ÿ®ÿßÿ¥Ÿá
        if ! [[ "$input_port" =~ ^[0-9]+$ ]]; then
            echo "‚ùå Invalid input. Please enter a number."
            continue
        fi

        # ÿ®ÿ±ÿ±ÿ≥€å ÿß€åŸÜ⁄©Ÿá ÿØÿ± ÿ®ÿßÿ≤Ÿá ŸÖÿ¨ÿßÿ≤ ÿ®ÿßÿ¥Ÿá
        if (( input_port < 1024 || input_port > 65535 )); then
            echo "‚ùå Port must be between 1024 and 65535."
            continue
        fi

        # ÿß⁄Øÿ± ŸáŸÖŸá ⁄Ü€åÿ≤ ÿØÿ±ÿ≥ÿ™ ÿ®ŸàÿØÿå ŸÖŸÇÿØÿßÿ± ÿ±Ÿà ÿ≥ÿ™ ⁄©ŸÜ Ÿà break ÿ®ÿ≤ŸÜ
        WG_PORT="$input_port"
        # ÿ∞ÿÆ€åÿ±Ÿá ÿØÿ± ŸÅÿß€åŸÑ
        echo "$WG_PORT" > "$Main_PORT_FILE"
        break
    done

    msg info "Configuring Main server on port $WG_PORT..."

    # ÿ™ÿ¥ÿÆ€åÿµ ÿÆŸàÿØ⁄©ÿßÿ± ÿß€åŸÜÿ™ÿ±ŸÅ€åÿ≥ ÿ¥ÿ®⁄©Ÿá ÿÆÿßÿ±ÿ¨€å (ÿ®ÿ±ÿß€å NAT ⁄©ÿ±ÿØŸÜ ÿ™ÿ±ÿßŸÅ€å⁄© WireGuard)
    # ŸÖÿπŸÖŸàŸÑÿßŸã eth0 €åÿß ens3 €åÿß ...
    DEFAULT_IFACE=$(ip route get 1 | awk '{print $5; exit}')
    if [[ -z "$DEFAULT_IFACE" ]]; then
        msg error "Could not detect default network interface!"
        exit 1
    fi

    # ÿ≠ÿ∞ŸÅ ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ®ÿßŸÇ€å‚ÄåŸÖÿßŸÜÿØŸá ŸÇÿ®ŸÑ€å (ÿØÿ± ÿµŸàÿ±ÿ™€å ⁄©Ÿá ⁄©ÿßŸÜŸÅ€å⁄Ø ŸÇÿ®ŸÑ€å Ÿàÿ¨ŸàÿØ ÿØÿßÿ¥ÿ™Ÿá)
    systemctl stop wg-quick@$WG_INTERFACE 2>/dev/null || true
    ip link del $WG_INTERFACE 2>/dev/null || true

    # ÿ™ŸàŸÑ€åÿØ ⁄©ŸÑ€åÿØ ÿÆÿµŸàÿµ€å Ÿà ÿ≥Ÿæÿ≥ ⁄©ŸÑ€åÿØ ÿπŸÖŸàŸÖ€å ŸÖÿπÿßÿØŸÑ ÿ¢ŸÜ ÿ®ÿ±ÿß€å ÿ≥ÿ±Ÿàÿ± ÿß€åÿ±ÿßŸÜ
    PRIVATE_KEY=$(wg genkey)
    PUBLIC_KEY=$(echo "$PRIVATE_KEY" | wg pubkey)

    # ÿß€åÿ¨ÿßÿØ ŸÅÿß€åŸÑ ⁄©ÿßŸÜŸÅ€å⁄Ø WireGuard ÿ®ÿ±ÿß€å ÿ≥ÿ±Ÿàÿ± ÿß€åÿ±ÿßŸÜ
    cat > "/etc/wireguard/$WG_INTERFACE.conf" <<EOF
[Interface]
Address = $Main_IP/24                 
ListenPort = $WG_PORT                 
PrivateKey = $PRIVATE_KEY            
MTU = $MTU_SIZE                       
DNS = 8.8.8.8                         
PostUp = iptables -A FORWARD -i $WG_INTERFACE -j ACCEPT; iptables -t nat -A POSTROUTING -o $DEFAULT_IFACE -j MASQUERADE
PostDown = iptables -D FORWARD -i $WG_INTERFACE -j ACCEPT; iptables -t nat -D POSTROUTING -o $DEFAULT_IFACE -j MASQUERADE
EOF

    # ÿß€åŸÖŸÜ‚Äåÿ≥ÿßÿ≤€å ŸÅÿß€åŸÑ ⁄©ÿßŸÜŸÅ€å⁄Ø (ÿπÿØŸÖ ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿØ€å⁄Øÿ± ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿ®Ÿá ⁄©ŸÑ€åÿØŸáÿß)
    chmod 600 /etc/wireguard/$WG_INTERFACE.conf

    # ŸÅÿπÿßŸÑ‚Äåÿ≥ÿßÿ≤€å ÿ≥ÿ±Ÿà€åÿ≥ WireGuard ÿ®Ÿá‚ÄåÿµŸàÿ±ÿ™ ÿØÿßÿ¶ŸÖ Ÿà ÿßÿ¨ÿ±ÿß€å ÿßŸàŸÑ€åŸá
    systemctl enable --now wg-quick@$WG_INTERFACE >/dev/null 2>&1

    # ÿ®ÿ±ÿ±ÿ≥€å ÿß€åŸÜ⁄©Ÿá ÿ¢€åÿß ÿ±ÿßÿ®ÿ∑ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ®ÿßŸÑÿß ÿ¢ŸÖÿØŸá €åÿß ŸÜŸá
    if systemctl is-active --quiet wg-quick@$WG_INTERFACE; then
        msg success "Main Mapsim Tunnel interface started successfully on $Main_IP"
    else
        msg error "Failed to start Main Mapsim Tunnel interface"
        exit 1
    fi

    # ÿßŸÅÿ≤ŸàÿØŸÜ ŸÇÿßŸÜŸàŸÜ ŸÅÿß€åÿ±ŸàÿßŸÑ ÿ®ÿ±ÿß€å ÿ®ÿßÿ≤ ⁄©ÿ±ÿØŸÜ ŸæŸàÿ±ÿ™ WireGuard ŸÅŸÇÿ∑ ÿß⁄Øÿ± Ÿàÿ¨ŸàÿØ ŸÜÿØÿßÿ¥ÿ™Ÿá ÿ®ÿßÿ¥ÿØ
    if ! iptables -C INPUT -p udp --dport $WG_PORT -j ACCEPT 2>/dev/null; then
        iptables -A INPUT -p udp --dport $WG_PORT -j ACCEPT
    fi

    # ⁄Øÿ±ŸÅÿ™ŸÜ IP ÿπŸÖŸàŸÖ€å (Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂ ÿßÿ≤ $IP ⁄©Ÿá ŸÇÿ®ŸÑÿßŸã ÿ®ÿß curl ⁄Øÿ±ŸÅÿ™Ÿá ÿ¥ÿØŸá)
    read -p "Enter the public IP of this Main server [$IP]: " Main_PUBLIC_IP
    Main_PUBLIC_IP=${Main_PUBLIC_IP:-$IP}

    # ÿ∞ÿÆ€åÿ±Ÿá ÿØÿ± ŸÅÿß€åŸÑ
    echo "$Main_PUBLIC_IP" > "$Main_PUBLIC_IP_FILE"

}

add_Distance_server() {
    # ÿß⁄Øÿ± ÿ≥ÿ±Ÿàÿ± ÿß€åÿ±ÿßŸÜ ŸáŸÜŸàÿ≤ ŸÜÿµÿ® ŸÜÿ¥ÿØŸá ÿ®ÿßÿ¥ÿØÿå ÿßŸÖ⁄©ÿßŸÜ ÿßŸÅÿ≤ŸàÿØŸÜ ⁄©ŸÑÿß€åŸÜÿ™ Ÿàÿ¨ŸàÿØ ŸÜÿØÿßÿ±ÿØ
    if ! is_Main_installed; then
        msg error "Main server must be installed first!"
        return 1
    fi

    # ÿ™ŸàŸÑ€åÿØ ÿ¢ÿØÿ±ÿ≥ IP ÿØÿßÿÆŸÑ€å ÿ®ÿ±ÿß€å ⁄©ŸÑÿß€åŸÜÿ™ ÿÆÿßÿ±ÿ¨€å (ÿ®ÿ± ÿßÿ≥ÿßÿ≥ ÿ¥ŸÖÿßÿ±ŸÜÿØŸá‚Äå€å ŸÇÿ®ŸÑ€å)
    local NEXT_ID=$(jq length "$PEERS_FILE")
    local Distance_IP="10.100.100.$((NEXT_ID + 2))"

    # ⁄Øÿ±ŸÅÿ™ŸÜ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿßÿ™ÿµÿßŸÑ SSH ÿ®Ÿá ÿ≥ÿ±Ÿàÿ± ÿÆÿßÿ±ÿ¨€å
    read -p "Enter Distance server public IP: " FIP
    read -p "Enter SSH port [$DEFAULT_SSH_PORT]: " SPORT
    SPORT=${SPORT:-$DEFAULT_SSH_PORT}  # ÿß⁄Øÿ± ⁄Ü€åÿ≤€å Ÿàÿßÿ±ÿØ ŸÜÿ¥ÿØÿå ÿßÿ≤ ŸÖŸÇÿØÿßÿ± Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ
    read -p "Enter SSH username [$DEFAULT_SSH_USER]: " SUSER
    SUSER=${SUSER:-$DEFAULT_SSH_USER}
    read -s -p "Enter SSH password: " SPASS; echo ""

    # ÿ™ŸàŸÑ€åÿØ ⁄©ŸÑ€åÿØ ÿÆÿµŸàÿµ€å Ÿà ÿπŸÖŸàŸÖ€å Ÿà preshared key ÿ®ÿ±ÿß€å ÿß€åŸÜ ⁄©ŸÑÿß€åŸÜÿ™
    local PKEY=$(wg genkey)
    local PUBKEY=$(echo "$PKEY" | wg pubkey)
    local PSK=$(wg genpsk)

    # ⁄Øÿ±ŸÅÿ™ŸÜ ⁄©ŸÑ€åÿØ ÿπŸÖŸàŸÖ€å ÿ≥ÿ±Ÿàÿ± ÿß€åÿ±ÿßŸÜ Ÿà IP ÿπŸÖŸàŸÖ€å‚Äåÿßÿ¥ (⁄©Ÿá ŸÇÿ®ŸÑÿßŸã ÿ∞ÿÆ€åÿ±Ÿá ÿ¥ÿØŸá)
    local Main_PUB=$(wg show $WG_INTERFACE public-key)
    local Main_PUBLIC_IP=$(cat "$Main_PUBLIC_IP_FILE")

    # ÿ™ÿ¥ÿÆ€åÿµ ÿß€åŸÜÿ™ÿ±ŸÅ€åÿ≥ ÿÆÿ±Ÿàÿ¨€å ÿ®ÿ±ÿß€å NAT ÿØÿ± ÿµŸàÿ±ÿ™ ŸÜ€åÿßÿ≤ (ÿØÿ± ÿß€åŸÜ ÿ™ÿßÿ®ÿπ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ŸÜÿ¥ÿØŸáÿå ŸàŸÑ€å ÿ¢ŸÖÿßÿØŸá ÿßÿ≥ÿ™)
    local DEFAULT_IFACE=$(ip route get 1 | awk '{print $5; exit}')

    # ÿ∞ÿÆ€åÿ±Ÿá ŸÖÿ¥ÿÆÿµÿßÿ™ ÿß€åŸÜ ⁄©ŸÑÿß€åŸÜÿ™ ÿ¨ÿØ€åÿØ ÿØÿ± ŸÅÿß€åŸÑ peers.json
    jq ". += [{
        \"ip\": \"$Distance_IP\",                   
        \"public_ip\": \"$FIP\",                   
        \"ssh_port\": \"$SPORT\",                  
        \"ssh_user\": \"$SUSER\",                  
        \"pubkey\": \"$PUBKEY\",                   
        \"psk\": \"$PSK\",                         
        \"added_at\": \"$(date +%Y-%m-%dT%H:%M:%S)\" 
    }]" "$PEERS_FILE" > tmp.json && mv tmp.json "$PEERS_FILE"

    wg set $WG_INTERFACE peer "$PUBKEY" allowed-ips "$Distance_IP/32" persistent-keepalive $PERSISTENT_KEEPALIVE preshared-key <(echo "$PSK")

    # ÿ≥ÿßÿÆÿ™ ŸÅÿß€åŸÑ ⁄©ÿßŸÜŸÅ€å⁄Ø ⁄©ÿßŸÖŸÑ ÿ®ÿ±ÿß€å ⁄©ŸÑÿß€åŸÜÿ™ ÿÆÿßÿ±ÿ¨€å
    local REMOTE_CFG="[Interface]
Address = $Distance_IP/24              
PrivateKey = $PKEY                    
ListenPort = $WG_PORT                 
MTU = $MTU_SIZE
DNS = 8.8.8.8

[Peer]
PublicKey = $Main_PUB                 
PresharedKey = $PSK                   
AllowedIPs = $Main_IP/32              
Endpoint = $Main_PUBLIC_IP:$WG_PORT   
PersistentKeepalive = $PERSISTENT_KEEPALIVE"

    # ÿßÿ¨ÿ±ÿß€å ÿØÿ≥ÿ™Ÿàÿ±ÿßÿ™ ÿßÿ≤ ÿ±ÿßŸá ÿØŸàÿ± ÿ®ÿ±ÿß€å ŸÜÿµÿ® Ÿà Ÿæ€å⁄©ÿ±ÿ®ŸÜÿØ€å WireGuard ÿØÿ± ÿ≥ÿ±Ÿàÿ± ÿÆÿßÿ±ÿ¨€å
    sshpass -p "$SPASS" ssh -o StrictHostKeyChecking=no -p "$SPORT" "$SUSER@$FIP" "
        sudo apt-get update
        sudo apt-get install -y wireguard wireguard-tools jq sshpass resolvconf iptables

        # ÿß⁄Øÿ± ÿßÿ≤ ŸÇÿ®ŸÑ ⁄©ÿßŸÜŸÅ€å⁄Ø €åÿß ÿ±ÿßÿ®ÿ∑€å Ÿàÿ¨ŸàÿØ ÿØÿßÿ±ÿØÿå ÿ≠ÿ∞ŸÅÿ¥ ⁄©ŸÜ
        sudo systemctl stop wg-quick@wg2 2>/dev/null || true
        sudo ip link del wg2 2>/dev/null || true

        # ŸÜŸàÿ¥ÿ™ŸÜ ŸÅÿß€åŸÑ Ÿæ€å⁄©ÿ±ÿ®ŸÜÿØ€å Ÿà ŸÅÿπÿßŸÑ‚Äåÿ≥ÿßÿ≤€å ÿ±ÿßÿ®ÿ∑ WireGuard
        sudo mkdir -p /etc/wireguard
        echo '$REMOTE_CFG' | sudo tee /etc/wireguard/wg2.conf >/dev/null
        sudo chmod 600 /etc/wireguard/wg2.conf
        sudo systemctl enable wg-quick@wg2
        sudo wg-quick up wg2
    " && msg success "Distance server configured successfully" || msg error "Failed to configure Distance server"
}

get_wg_port() {
    if [[ -f "$Main_PORT_FILE" ]]; then
        port=$(<"$Main_PORT_FILE")
        if [[ "$port" =~ ^[0-9]+$ ]]; then
            echo "$port"
            return
        fi
    fi
    echo "21301"
}


#ÿ™ÿ≥ÿ™ ÿØÿßÿÆŸÑ€å
# add_Distance_server() {
#     # ÿß⁄Øÿ± ÿ≥ÿ±Ÿàÿ± ÿß€åÿ±ÿßŸÜ ŸáŸÜŸàÿ≤ ŸÜÿµÿ® ŸÜÿ¥ÿØŸá ÿ®ÿßÿ¥ÿØÿå ÿßŸÖ⁄©ÿßŸÜ ÿßŸÅÿ≤ŸàÿØŸÜ ⁄©ŸÑÿß€åŸÜÿ™ Ÿàÿ¨ŸàÿØ ŸÜÿØÿßÿ±ÿØ
#     if ! is_Main_installed; then
#         msg error "Main server must be installed first!"
#         return 1
#     fi

#     # ÿ™ŸàŸÑ€åÿØ ÿ¢ÿØÿ±ÿ≥ IP ÿØÿßÿÆŸÑ€å ÿ®ÿ±ÿß€å ⁄©ŸÑÿß€åŸÜÿ™ ÿÆÿßÿ±ÿ¨€å (ÿ®ÿ± ÿßÿ≥ÿßÿ≥ ÿ¥ŸÖÿßÿ±ŸÜÿØŸá‚Äå€å ŸÇÿ®ŸÑ€å)
#     local NEXT_ID=$(jq length "$PEERS_FILE")
#     local Distance_IP="10.100.100.$((NEXT_ID + 2))"

#     # ⁄Øÿ±ŸÅÿ™ŸÜ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ∏ÿßŸáÿ±€å ÿ®ÿ±ÿß€å ÿ≥ÿßÿ≤⁄Øÿßÿ±€å ÿ®ÿß ÿ≥ÿßÿÆÿ™ÿßÿ± ÿßŸàŸÑ€åŸá (ÿ®ÿØŸàŸÜ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ŸàÿßŸÇÿπ€å)
#     read -p "Enter Distance server public IP: " FIP
#     read -p "Enter SSH port [$DEFAULT_SSH_PORT]: " SPORT
#     SPORT=${SPORT:-$DEFAULT_SSH_PORT}
#     read -p "Enter SSH username [$DEFAULT_SSH_USER]: " SUSER
#     SUSER=${SUSER:-$DEFAULT_SSH_USER}
#     read -s -p "Enter SSH password (not used in local mode): " SPASS; echo ""

#     # ÿ™ŸàŸÑ€åÿØ ⁄©ŸÑ€åÿØ ÿÆÿµŸàÿµ€å Ÿà ÿπŸÖŸàŸÖ€å Ÿà PSK ÿ®ÿ±ÿß€å ÿß€åŸÜ ⁄©ŸÑÿß€åŸÜÿ™
#     local PKEY=$(wg genkey)
#     local PUBKEY=$(echo "$PKEY" | wg pubkey)
#     local PSK=$(wg genpsk)
#     # ⁄Øÿ±ŸÅÿ™ŸÜ ⁄©ŸÑ€åÿØ ÿπŸÖŸàŸÖ€å ÿ≥ÿ±Ÿàÿ± Ÿà IP ÿπŸÖŸàŸÖ€å
#     local Main_PUB=$(wg show "$WG_INTERFACE" public-key)
#     local Main_PUBLIC_IP=$(cat "$Main_PUBLIC_IP_FILE")
#     local Main_IP="10.100.100.1"  # IP ÿ≥ÿ±Ÿàÿ± ÿßÿµŸÑ€å - ÿ®ÿß€åÿØ ÿ®ÿß ÿ≥€åÿ≥ÿ™ŸÖ ÿ¥ŸÖÿß ŸáŸÖÿßŸáŸÜ⁄Ø ÿ®ÿßÿ¥ÿØ

#     # ÿ∞ÿÆ€åÿ±Ÿá ŸÖÿ¥ÿÆÿµÿßÿ™ ⁄©ŸÑÿß€åŸÜÿ™ ÿØÿ± peers.json
#     jq ". += [{
#         \"ip\": \"$Distance_IP\",
#         \"public_ip\": \"$FIP\",
#         \"ssh_port\": \"$SPORT\",
#         \"ssh_user\": \"$SUSER\",
#         \"pubkey\": \"$PUBKEY\",
#         \"psk\": \"$PSK\",
#         \"added_at\": \"$(date +%Y-%m-%dT%H:%M:%S)\"
#     }]" "$PEERS_FILE" > tmp.json && mv tmp.json "$PEERS_FILE"

#     # ÿßÿ∂ÿßŸÅŸá‚Äå⁄©ÿ±ÿØŸÜ ÿß€åŸÜ peer ÿ®Ÿá ÿ≥ÿ±Ÿàÿ± ÿß€åÿ±ÿßŸÜ (wg0)
#     wg set "$WG_INTERFACE" peer "$PUBKEY" allowed-ips "$Distance_IP/32" persistent-keepalive $PERSISTENT_KEEPALIVE preshared-key <(echo "$PSK")

#     # ÿ≥ÿßÿÆÿ™ ⁄©ÿßŸÜŸÅ€å⁄Ø WireGuard ÿ®ÿ±ÿß€å ⁄©ŸÑÿß€åŸÜÿ™ ÿÆÿßÿ±ÿ¨€å (wg2) ÿ±Ÿà€å ŸáŸÖ€åŸÜ ÿ≥€åÿ≥ÿ™ŸÖ
#     local REMOTE_CFG="[Interface]
# Address = $Distance_IP/32
# PrivateKey = $PKEY
# ListenPort = $WG_PORT
# MTU = $MTU_SIZE
# DNS = 8.8.8.8

# [Peer]
# PublicKey = $Main_PUB
# PresharedKey = $PSK
# AllowedIPs = $Main_IP/32
# Endpoint = $Main_PUBLIC_IP:$WG_PORT
# PersistentKeepalive = $PERSISTENT_KEEPALIVE"

#     # ŸÜŸàÿ¥ÿ™ŸÜ ŸÅÿß€åŸÑ ⁄©ÿßŸÜŸÅ€å⁄Ø
#     echo "$REMOTE_CFG" | sudo tee /etc/wireguard/wg2.conf >/dev/null
#     sudo chmod 600 /etc/wireguard/wg2.conf

#     # ŸÅÿπÿßŸÑ‚Äåÿ≥ÿßÿ≤€å ÿ±ÿßÿ®ÿ∑ wg2
#     sudo systemctl stop wg-quick@wg2 2>/dev/null || true
#     sudo ip link del wg2 2>/dev/null || true
#     sudo systemctl enable wg-quick@wg2
#     if sudo wg-quick up wg2; then
#         msg success "Distance server (wg2) interface brought up successfully."
#     else
#         msg error "Failed to bring up wg2 interface"
#     fi
# }

list_Distance_servers() {
    # ÿ®ÿ±ÿ±ÿ≥€å ŸÅÿß€åŸÑ
    if [[ ! -f "$PEERS_FILE" ]] || [[ $(jq length "$PEERS_FILE") -eq 0 ]]; then
        msg info "No Distance servers configured"
        return
    fi

    echo -e "\n${GREEN}Configured Distance Servers:${NC}"

    # ŸáÿØÿ± ÿ¨ÿØŸàŸÑ ÿ®ÿß 5 ÿ≥ÿ™ŸàŸÜ: ÿ¥ŸÖÿßÿ±Ÿáÿå IP ÿÆÿµŸàÿµ€åÿå IP ÿπŸÖŸàŸÖ€åÿå SSHÿå ÿ≤ŸÖÿßŸÜ
    echo -e "${CYAN}‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê${NC}"
    echo -e "${CYAN}‚îÇ #  ‚îÇ Private IP         ‚îÇ Public IP          ‚îÇ SSH Info                   ‚îÇ Added At                   ‚îÇ${NC}"
    echo -e "${CYAN}‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§${NC}"

    local idx=0
    jq -r '.[] | "\(.ip)|\(.public_ip)|\(.ssh_user)@\(.public_ip):\(.ssh_port)|\(.added_at)"' "$PEERS_FILE" | while IFS='|' read -r ip public_ip ssh_info added_at; do
        idx=$((idx+1))
        printf "${CYAN}‚îÇ %-2s ‚îÇ %-18s ‚îÇ %-18s ‚îÇ %-26s ‚îÇ %-26s ‚îÇ\n" "$idx" "$ip" "$public_ip" "$ssh_info" "$added_at"
    done

    echo -e "${CYAN}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò${NC}"

    # Ÿàÿ∂ÿπ€åÿ™ ÿßÿ™ÿµÿßŸÑ‚ÄåŸáÿß
    echo -e "\n${YELLOW}Connection Status:${NC}"
    jq -r '.[] | "\(.ip) \(.pubkey)"' "$PEERS_FILE" | while read -r ip pubkey; do
        status=$(check_peer_connection "$ip" "$pubkey")
        echo -e "${CYAN}$ip:${NC} $status"
    done
}



remove_Distance_peer() {
    # ŸÜŸÖÿß€åÿ¥ ŸÑ€åÿ≥ÿ™ ÿ≥ÿ±Ÿàÿ±Ÿáÿß€å ÿÆÿßÿ±ÿ¨€å ŸÅÿπŸÑ€å ÿ®ÿ±ÿß€å ÿßŸÜÿ™ÿÆÿßÿ® ÿ≠ÿ∞ŸÅ
    list_Distance_servers
    
    # ÿØÿ±€åÿßŸÅÿ™ ÿ™ÿπÿØÿßÿØ ⁄©ŸÑ ÿ≥ÿ±Ÿàÿ±Ÿáÿß ÿßÿ≤ ŸÅÿß€åŸÑ peers.json
    local count=$(jq length "$PEERS_FILE")
    
    # ÿß⁄Øÿ± Ÿá€å⁄Ü ÿ≥ÿ±Ÿàÿ±€å Ÿàÿ¨ŸàÿØ ŸÜÿØÿßÿ¥ÿ™ÿå ÿÆÿ±Ÿàÿ¨ ÿßÿ≤ ÿ™ÿßÿ®ÿπ
    [[ $count -eq 0 ]] && return
    
    # ⁄Øÿ±ŸÅÿ™ŸÜ ÿ¥ŸÖÿßÿ±Ÿá ÿ≥ÿ±Ÿàÿ±€å ⁄©Ÿá ⁄©ÿßÿ±ÿ®ÿ± ŸÖ€å‚ÄåÿÆŸàÿßŸáÿØ ÿ≠ÿ∞ŸÅ ⁄©ŸÜÿØ
    read -p "Please Select Distance Server For uninstall (Choice number): " IDX
    
    # ÿßÿπÿ™ÿ®ÿßÿ±ÿ≥ŸÜÿ¨€å Ÿàÿ±ŸàÿØ€å: ÿ®ÿß€åÿØ ÿπÿØÿØ ÿµÿ≠€åÿ≠ ÿØÿ± ÿ®ÿßÿ≤Ÿá ÿØÿ±ÿ≥ÿ™ ÿ®ÿßÿ¥ÿØ
    [[ ! "$IDX" =~ ^[0-9]+$ ]] || [[ $IDX -lt 1 ]] || [[ $IDX -gt $count ]] && msg error "Invalid selection" && return
    
    # ÿ™ÿ®ÿØ€åŸÑ ÿ¥ŸÖÿßÿ±Ÿá ÿ®Ÿá ÿßŸÜÿØ€åÿ≥ ŸÖŸÜÿßÿ≥ÿ® ÿ®ÿ±ÿß€å jq (ÿßÿ≤ €∞ ÿ¥ÿ±Ÿàÿπ ŸÖ€å‚Äåÿ¥ŸàÿØ)
    IDX=$((IDX - 1))
    
    # ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ IP Ÿà ⁄©ŸÑ€åÿØ ÿπŸÖŸàŸÖ€å peer ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿßÿ≤ ŸÅÿß€åŸÑ peers.json
    local IP=$(jq -r ".[$IDX].ip" "$PEERS_FILE")
    local PUB=$(jq -r ".[$IDX].pubkey" "$PEERS_FILE")
    local FIP=$(jq -r ".[$IDX].public_ip" "$PEERS_FILE")
    local SUSER=$(jq -r ".[$IDX].ssh_user" "$PEERS_FILE")
    local SPORT=$(jq -r ".[$IDX].ssh_port" "$PEERS_FILE")

    read -s -p "Enter SSH password for $SUSER@$FIP: " SPASS; echo ""
    msg info "Removing peer from local Mapsim Tunnel config..."

    sshpass -p "$SPASS" ssh -o StrictHostKeyChecking=no -p "$SPORT" "$SUSER@$FIP" "
        sudo systemctl stop wg-quick@wg2 2>/dev/null || true
        sudo systemctl disable wg-quick@wg2 2>/dev/null || true
        sudo ip link del wg2 2>/dev/null || true
        sudo rm -f /etc/wireguard/wg2.conf
        sudo rm -rf /etc/wireguard
        sudo rm -f /etc/systemd/system/wg-quick@wg2.service 2>/dev/null || true
        sudo systemctl daemon-reload
    " && msg success "Remote Mapsim Tunnel Distance from $FIP" || msg warn "Failed to clean Distance server"

    # ÿ≠ÿ∞ŸÅ peer ÿßÿ≤ ÿ™ŸÜÿ∏€åŸÖÿßÿ™ WireGuard
    wg set $WG_INTERFACE peer "$PUB" remove
    
    # ÿ≠ÿ∞ŸÅ peer ÿßÿ≤ ŸÅÿß€åŸÑ JSON Ÿà ÿ¨ÿß€å⁄Øÿ≤€åŸÜ€å ŸÅÿß€åŸÑ
    jq "del(.[$IDX])" "$PEERS_FILE" > tmp.json && mv tmp.json "$PEERS_FILE"
    
    # Ÿæ€åÿßŸÖ ŸÖŸàŸÅŸÇ€åÿ™
    msg success "Removed peer $IP"
    msg success "Remote Mapsim Tunnel Distance Finished $FIP  . . ."
    
}


uninstall_main_server() {
    # ÿ™ÿß€å€åÿØ ÿßÿ≤ ⁄©ÿßÿ±ÿ®ÿ± ÿ®ÿ±ÿß€å ÿ≠ÿ∞ŸÅ ÿ™ŸàŸÜŸÑ ÿß€åÿ±ÿßŸÜ
    read -p "Are you sure you want to uninstall the Main tunnel? [y/N] " confirm
    
    # ÿÆÿ±Ÿàÿ¨ ÿØÿ± ÿµŸàÿ±ÿ™ ÿßŸÜÿµÿ±ÿßŸÅ ⁄©ÿßÿ±ÿ®ÿ±
    [[ "$confirm" != "y" && "$confirm" != "Y" ]] && return

    # ÿ™ŸàŸÇŸÅ Ÿà ÿ∫€åÿ±ŸÅÿπÿßŸÑ‚Äåÿ≥ÿßÿ≤€å ÿ≥ÿ±Ÿà€åÿ≥ WireGuard
    sudo systemctl stop wg-quick@"$WG_INTERFACE" 2>/dev/null || true
    sudo systemctl disable wg-quick@"$WG_INTERFACE" 2>/dev/null || true

    # ÿ≠ÿ∞ŸÅ ÿß€åŸÜÿ™ÿ±ŸÅ€åÿ≥ ÿß⁄Øÿ± ŸáŸÜŸàÿ≤ ŸÅÿπÿßŸÑ ÿ®ÿßÿ¥ÿØ
    sudo ip link del "$WG_INTERFACE" 2>/dev/null || true

    # ÿ≠ÿ∞ŸÅ ŸÅÿß€åŸÑ Ÿæ€å⁄©ÿ±ÿ®ŸÜÿØ€å
    sudo rm -f "/etc/wireguard/$WG_INTERFACE.conf"

    # ÿ®ÿ±ÿ±ÿ≥€å ŸÖŸàŸÅŸÇ€åÿ™ ÿ≠ÿ∞ŸÅ
    if ip link show "$WG_INTERFACE" &>/dev/null; then
        echo "‚ö†Ô∏è  Interface $WG_INTERFACE still exists!"
        msg error "‚ùå Main tunnel has NOT been uninstalled."
    else
        echo "‚úÖ Interface $WG_INTERFACE removed successfully."
        msg success "‚úÖ Main tunnel has been uninstalled."
    fi
}



# ŸÜŸÖÿß€åÿ¥ ŸÖŸÜŸà€å ÿßÿµŸÑ€å ÿ®ÿ±ŸÜÿßŸÖŸá ÿ®ÿß ⁄Øÿ≤€åŸÜŸá‚ÄåŸáÿß€å ŸÇÿßÿ®ŸÑ ÿßŸÜÿ™ÿÆÿßÿ®
# ŸÖŸÜŸà ÿ®Ÿá ÿµŸàÿ±ÿ™ ÿ≤€åÿ®ÿß ÿ®ÿß ÿ±ŸÜ⁄Ø‚ÄåŸáÿß Ÿà ÿ∑ÿ±ÿ≠ ÿ®ÿß ÿ≠ÿßÿ¥€åŸá ⁄ÜÿßŸæ ŸÖ€å‚Äåÿ¥ŸàÿØ
# ⁄Øÿ≤€åŸÜŸá‚ÄåŸáÿß:
# 1 - ŸÜÿµÿ® ÿ≥ÿ±Ÿàÿ± ÿßÿµŸÑ€å ÿß€åÿ±ÿßŸÜ
# 2 - ÿßŸÅÿ≤ŸàÿØŸÜ ÿ≥ÿ±Ÿàÿ± ÿÆÿßÿ±ÿ¨€å (Peer)
# 3 - ŸÜŸÖÿß€åÿ¥ ÿ≥ÿ±Ÿàÿ±Ÿáÿß€å ÿÆÿßÿ±ÿ¨€å ÿ´ÿ®ÿ™ ÿ¥ÿØŸá
# 4 - ÿ≠ÿ∞ŸÅ €å⁄© ÿ≥ÿ±Ÿàÿ± ÿÆÿßÿ±ÿ¨€å
# 5 - ÿ≠ÿ∞ŸÅ ⁄©ÿßŸÖŸÑ ÿ™ŸàŸÜŸÑ ÿß€åÿ±ÿßŸÜ
# 0 - ÿÆÿ±Ÿàÿ¨ ÿßÿ≤ ÿ®ÿ±ŸÜÿßŸÖŸá
show_menu() {
    clear
    width=81
    export LC_ALL=C.UTF-8

    echo -e "${MAGENTA}"
    echo "       ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ      ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ    ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñÑ‚ñà    ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ         "
    echo "      ‚ñÑ‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñà‚ñÑ   ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà  ‚ñÑ‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñà‚ñÑ      "
    echo "      ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà    ‚ñà‚ñÄ  ‚ñà‚ñà‚ñà‚ñå ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà      "
    echo "      ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà        ‚ñà‚ñà‚ñà‚ñå ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà      "
    echo "      ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ  ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñå ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà      "
    echo "      ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà                 ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà      "
    echo "      ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà           ‚ñÑ‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà      "
    echo "       ‚ñÄ‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñÄ    ‚ñà‚ñà‚ñà    ‚ñà‚ñÄ   ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÄ       ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ  ‚ñà‚ñÄ    ‚ñÄ‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñÄ       "
    echo "                                                                                       "
    echo "                     ‚ñà‚ñà‚ñà    ‚ñà‚ñÑ  ‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ   ‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ      ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñÑ‚ñà                   "
    echo "         ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñà‚ñÑ ‚ñà‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñà‚ñÑ   ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà                   "
    echo "            ‚ñÄ‚ñà‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñà ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà    ‚ñà‚ñÄ  ‚ñà‚ñà‚ñà                   "
    echo "             ‚ñà‚ñà‚ñà   ‚ñÄ ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ     ‚ñà‚ñà‚ñà                   "
    echo "             ‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà ‚ñÄ‚ñÄ‚ñà‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ     ‚ñà‚ñà‚ñà                   "
    echo "             ‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà    ‚ñà‚ñÑ  ‚ñà‚ñà‚ñà                   "
    echo "             ‚ñà‚ñà‚ñà     ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñå    ‚ñÑ             "
    echo "            ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÄ   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ   ‚ñÄ‚ñà   ‚ñà‚ñÄ   ‚ñÄ‚ñà   ‚ñà‚ñÄ    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ‚ñÑ‚ñà‚ñà             "
}

show_menu_item() 
{
    echo -e '\n\n'  # ÿß€åŸÜÿ¨ÿß ŸÖŸÜŸà€å ÿ¨ÿØ€åÿØ Ÿæÿß€å€åŸÜ‚Äåÿ™ÿ± ⁄ÜÿßŸæ ŸÖ€åÿ¥Ÿá
    echo -e "${CYAN}‚îå$(printf '‚îÄ%.0s' $(seq 1 $((width - 2))))‚îê${NC}"
    printf "${CYAN}‚îÇ%*s%s%*s‚îÇ${NC}\n" $(( (width - 2 - 27) / 2 )) "" "Mapsim Tunnel - Main Menu  " $(( (width - 2 - 27 + 1) / 2 )) ""
    echo -e "${CYAN}‚îú$(printf '‚îÄ%.0s' $(seq 1 $((width - 2))))‚î§${NC}"

    menu_item() {
        local num="$1"
        local text="$2"
        local color_num="$3"
        local line=" $num - $text"
        local spaces=$((width - 2 - ${#line}))
        # ÿ¥ŸÖÿßÿ±Ÿá ÿ±ŸÜ⁄Ø€åÿå ŸÖÿ™ŸÜ ÿ®Ÿá ÿ±ŸÜ⁄Ø ÿ≥€åÿßŸÜÿå ŸÅÿßÿµŸÑŸá Ÿà ⁄©ÿßÿØÿ±
        printf "‚îÇ${color_num}%s${CYAN}%*s${NC}‚îÇ\n" "$line" "$spaces" ""
    }

    menu_item "1" "Install Main Service Tunnel" "${GREEN}"
    menu_item "2" "Add Distance Server" "${GREEN}"
    menu_item "3" "List Distance Servers" "${GREEN}"
    menu_item "4" "Remove a Distance Server" "${GREEN}"
    menu_item "5" "Uninstall Main Service Tunnel" "${GREEN}"
    menu_item "0" "Exit" "${RED}"

    echo -e "${CYAN}‚îî$(printf '‚îÄ%.0s' $(seq 1 $((width - 2))))‚îò${NC}"
}



# ==============================================
# ÿßÿ¨ÿ±ÿß€å ÿßÿµŸÑ€å ÿ®ÿ±ŸÜÿßŸÖŸá: ÿ≠ŸÑŸÇŸá ŸÖŸÜŸà€å ÿ™ÿπÿßŸÖŸÑ€å
# ==============================================

main() {
    init  # ÿ¢ŸÖÿßÿØŸá‚Äåÿ≥ÿßÿ≤€å ÿßŸàŸÑ€åŸá (ŸÖÿ´ŸÑ ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿ™ŸÜÿ∏€åŸÖÿßÿ™ÿå ⁄Ü⁄© ⁄©ÿ±ÿØŸÜ ŸÜ€åÿßÿ≤ŸÖŸÜÿØ€å‚ÄåŸáÿß Ÿà ŸÖÿ™ÿ∫€åÿ±Ÿáÿß)

    # ÿ≠ŸÑŸÇŸá ÿ®€å‚ÄåŸÜŸáÿß€åÿ™ ⁄©Ÿá ŸÖŸÜŸà Ÿà Ÿàÿ∂ÿπ€åÿ™ ÿ±ÿß ŸÜŸÖÿß€åÿ¥ ŸÖ€å‚ÄåÿØŸáÿØ Ÿà ÿßÿ≤ ⁄©ÿßÿ±ÿ®ÿ± ⁄Øÿ≤€åŸÜŸá ŸÖ€å‚Äå⁄Ø€åÿ±ÿØ
    while true; do
        show_menu
        show_header    # ŸÜŸÖÿß€åÿ¥ Ÿàÿ∂ÿπ€åÿ™ ŸÅÿπŸÑ€å ÿ≥ÿ±Ÿà€åÿ≥ Ÿà ÿßÿ™ÿµÿßŸÑÿßÿ™
        show_menu_item
        #show_menu      # ŸÜŸÖÿß€åÿ¥ ŸÖŸÜŸà€å ÿßÿµŸÑ€å ÿ®ÿ±ÿß€å ÿßŸÜÿ™ÿÆÿßÿ® ÿπŸÖŸÑ€åÿßÿ™
        read -p $'\nEnter Number Of List: ' opt  # ⁄Øÿ±ŸÅÿ™ŸÜ Ÿàÿ±ŸàÿØ€å ÿßÿ≤ ⁄©ÿßÿ±ÿ®ÿ±

        case $opt in
            1) install_main_server ;;    # ŸÜÿµÿ® ÿ≥ÿ±Ÿàÿ± ÿß€åÿ±ÿßŸÜ
            2) add_Distance_server ;;     # ÿßŸÅÿ≤ŸàÿØŸÜ ÿ≥ÿ±Ÿàÿ± ÿÆÿßÿ±ÿ¨€å ÿ¨ÿØ€åÿØ
            3) list_Distance_servers ;;   # ŸÜŸÖÿß€åÿ¥ ÿ≥ÿ±Ÿàÿ±Ÿáÿß€å ÿÆÿßÿ±ÿ¨€å ÿ´ÿ®ÿ™‚Äåÿ¥ÿØŸá
            4) remove_Distance_peer ;;    # ÿ≠ÿ∞ŸÅ €å⁄© ÿ≥ÿ±Ÿàÿ± ÿÆÿßÿ±ÿ¨€å
            5) uninstall_main_server ;;         # ÿ≠ÿ∞ŸÅ ⁄©ÿßŸÖŸÑ ÿ™ŸàŸÜŸÑ ÿß€åÿ±ÿßŸÜ
            0) exit 0 ;;                 # ÿÆÿ±Ÿàÿ¨ ÿßÿ≤ ÿ®ÿ±ŸÜÿßŸÖŸá
            *) msg error "Invalid Choice" ;;  # ⁄Øÿ≤€åŸÜŸá ŸÜÿßŸÖÿπÿ™ÿ®ÿ±ÿå Ÿæ€åÿßŸÖ ÿÆÿ∑ÿß ŸÖ€å‚ÄåÿØŸáÿØ
        esac

        # ÿß⁄Øÿ± ⁄Øÿ≤€åŸÜŸá ÿÆÿ±Ÿàÿ¨ ŸÜÿ®ŸàÿØÿå ŸÖŸÜÿ™ÿ∏ÿ± ŸÖ€å‚ÄåŸÖÿßŸÜÿØ ÿ™ÿß ⁄©ÿßÿ±ÿ®ÿ± ÿß€åŸÜÿ™ÿ± ÿ®ÿ≤ŸÜÿØ Ÿà ÿØŸàÿ®ÿßÿ±Ÿá ŸÖŸÜŸà ŸÜŸÖÿß€åÿ¥ ÿØÿßÿØŸá ÿ¥ŸàÿØ
        [[ $opt -ne 0 ]] && read -p $'\nPress Enter to continue...'
    done
}

# ÿßÿ¨ÿ±ÿß€å ÿ™ÿßÿ®ÿπ main Ÿà ÿ¥ÿ±Ÿàÿπ ÿ®ÿ±ŸÜÿßŸÖŸá
main

